plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    id 'com.gradleup.shadow' version '9.0.0-rc2'
}

group = 'uz.alex2276564'
version = '1.3'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "okaeri"
        url = "https://storehouse.okaeri.eu/repository/maven-public/"
    }
}

dependencies {
    compileOnly "com.destroystokyo.paper:paper-api:1.16.5-R0.1-SNAPSHOT"

    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'

    testCompileOnly 'org.projectlombok:lombok:1.18.38'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.38'

    implementation 'com.google.code.gson:gson:2.13.1'

    compileOnly "net.kyori:adventure-text-minimessage:4.23.0"

    implementation("eu.okaeri:okaeri-configs-yaml-snakeyaml:5.0.9")
}

// ⚠️ NOTE: Shading is required for legacy compatibility!
// Libraries like Okaeri Configs and Gson may not work correctly on older server versions (1.16.x and below) if not shaded.
// Shadowing ensures that all required dependencies are bundled and isolated within your final plugin JAR.
shadowJar {
    archiveClassifier.set('')

    relocate 'eu.okaeri.configs', 'uz.alex2276564.permguard.libs.okaeri.configs'

    relocate 'com.google.gson', 'uz.alex2276564.permguard.libs.gson'
}

build {
    dependsOn shadowJar
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.16.5")
    }
}

def targetJavaVersion = 17

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset = 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
